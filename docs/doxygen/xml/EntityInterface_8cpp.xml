<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="EntityInterface_8cpp" kind="file" language="C++">
    <compoundname>EntityInterface.cpp</compoundname>
    <includes refid="EntityInterface_8hpp" local="yes">EntityInterface.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>src/EntityInterface.cpp</label>
        <link refid="EntityInterface_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>EntityInterface.hpp</label>
        <link refid="EntityInterface_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>components/ConsoleLogsComponent.hpp</label>
        <link refid="ConsoleLogsComponent_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>components/DnaComponents.hpp</label>
        <link refid="DnaComponents_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>components/EntityTypeComponent.hpp</label>
        <link refid="EntityTypeComponent_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>components/HealthComponents.hpp</label>
        <link refid="HealthComponents_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>components/ItemsComponents.hpp</label>
        <link refid="ItemsComponents_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>components/MetabolismComponents.hpp</label>
        <link refid="MetabolismComponents_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>components/MovingComponent.hpp</label>
        <link refid="MovingComponent_8hpp_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>components/PerceptionComponent.hpp</label>
        <link refid="PerceptionComponent_8hpp_source"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>components/PhysicsComponents.hpp</label>
        <link refid="PhysicsComponents_8hpp_source"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>components/PlantsComponents.hpp</label>
        <link refid="PlantsComponents_8hpp_source"/>
      </node>
      <node id="31">
        <label>components/TerrainComponents.hpp</label>
        <link refid="TerrainComponents_8hpp_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>algorithm</label>
      </node>
      <node id="4">
        <label>bitset</label>
      </node>
      <node id="11">
        <label>chrono</label>
      </node>
      <node id="20">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>ctime</label>
      </node>
      <node id="5">
        <label>entt/entt.hpp</label>
      </node>
      <node id="13">
        <label>iomanip</label>
      </node>
      <node id="21">
        <label>iostream</label>
      </node>
      <node id="14">
        <label>map</label>
      </node>
      <node id="3">
        <label>nanobind/nanobind.h</label>
      </node>
      <node id="15">
        <label>sstream</label>
      </node>
      <node id="25">
        <label>stdexcept</label>
      </node>
      <node id="16">
        <label>string</label>
      </node>
      <node id="6">
        <label>tuple</label>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="32">
        <label>unordered_set</label>
      </node>
      <node id="8">
        <label>utility</label>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
      <node id="9">
        <label>ylt/struct_pack.hpp</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="EntityInterface_8cpp_1a8a482755ffaa2e2e95b4d7e8d8fcb03e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Component</type>
          </param>
          <param>
            <type>typename Registry</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void try_add_component</definition>
        <argsstring>(Registry &amp;registry, entt::entity entity, EntityInterface &amp;entityInterface, ComponentFlag flag)</argsstring>
        <name>try_add_component</name>
        <param>
          <type>Registry &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>entt::entity</type>
          <declname>entity</declname>
        </param>
        <param>
          <type><ref refid="classEntityInterface" kindref="compound">EntityInterface</ref> &amp;</type>
          <declname>entityInterface</declname>
        </param>
        <param>
          <type>ComponentFlag</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/EntityInterface.cpp" line="5" column="6" bodyfile="src/EntityInterface.cpp" bodystart="5" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="EntityInterface_8cpp_1a2f00c3aabcb7e01d3f997ffdb16bd9c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classEntityInterface" kindref="compound">EntityInterface</ref></type>
        <definition>EntityInterface createEntityInterface</definition>
        <argsstring>(entt::registry &amp;registry, entt::entity entity)</argsstring>
        <name>createEntityInterface</name>
        <param>
          <type>entt::registry &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type>entt::entity</type>
          <declname>entity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/EntityInterface.cpp" line="24" column="17" bodyfile="src/EntityInterface.cpp" bodystart="24" bodyend="64"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;EntityInterface.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>fetch<sp/>and<sp/>add<sp/>components<sp/>dynamically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Component,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Registry&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>try_add_component(Registry&amp;<sp/>registry,<sp/>entt::entity<sp/>entity,<sp/><ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>entityInterface,</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComponentFlag<sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>component<sp/>=<sp/>registry.template<sp/>try_get&lt;Component&gt;(entity))<sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;Component,<sp/>Position&gt;)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityInterface.setComponent&lt;<ref refid="structPosition" kindref="compound">Position</ref>&gt;(*component);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;Component,<sp/>Velocity&gt;)<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityInterface.setComponent&lt;<ref refid="structVelocity" kindref="compound">Velocity</ref>&gt;(*component);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;Component,<sp/>PhysicsStats&gt;)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityInterface.setComponent&lt;<ref refid="structPhysicsStats" kindref="compound">PhysicsStats</ref>&gt;(*component);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;Component,<sp/>HealthComponent&gt;)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityInterface.setComponent&lt;<ref refid="structHealthComponent" kindref="compound">HealthComponent</ref>&gt;(*component);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_same_v&lt;Component,<sp/>PerceptionComponent&gt;)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityInterface.setComponent&lt;<ref refid="structPerceptionComponent" kindref="compound">PerceptionComponent</ref>&gt;(*component);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entityInterface.addComponent(flag);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function<sp/>to<sp/>create<sp/>an<sp/>EntityInterface<sp/>dynamically<sp/>by<sp/>fetching<sp/>components</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="classEntityInterface" kindref="compound">EntityInterface</ref><sp/>createEntityInterface(entt::registry&amp;<sp/>registry,<sp/>entt::entity<sp/>entity)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classEntityInterface" kindref="compound">EntityInterface</ref><sp/>entity_interface;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>entity_interface.entityId<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(entity);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(registry.all_of&lt;<ref refid="structEntityTypeComponent" kindref="compound">EntityTypeComponent</ref>&gt;(entity))<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structEntityTypeComponent" kindref="compound">EntityTypeComponent</ref>&amp;<sp/>etc<sp/>=<sp/>registry.get&lt;<ref refid="structEntityTypeComponent" kindref="compound">EntityTypeComponent</ref>&gt;(entity);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_interface.setComponent&lt;<ref refid="structEntityTypeComponent" kindref="compound">EntityTypeComponent</ref>&gt;(etc);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(registry.all_of&lt;<ref refid="structPosition" kindref="compound">Position</ref>&gt;(entity))<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPosition" kindref="compound">Position</ref>&amp;<sp/>pos<sp/>=<sp/>registry.get&lt;<ref refid="structPosition" kindref="compound">Position</ref>&gt;(entity);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_interface.setComponent&lt;<ref refid="structPosition" kindref="compound">Position</ref>&gt;(pos);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(registry.all_of&lt;<ref refid="structVelocity" kindref="compound">Velocity</ref>&gt;(entity))<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>&amp;<sp/>vel<sp/>=<sp/>registry.get&lt;<ref refid="structVelocity" kindref="compound">Velocity</ref>&gt;(entity);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_interface.setComponent&lt;<ref refid="structVelocity" kindref="compound">Velocity</ref>&gt;(vel);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(registry.all_of&lt;<ref refid="structPhysicsStats" kindref="compound">PhysicsStats</ref>&gt;(entity))<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPhysicsStats" kindref="compound">PhysicsStats</ref>&amp;<sp/>ps<sp/>=<sp/>registry.get&lt;<ref refid="structPhysicsStats" kindref="compound">PhysicsStats</ref>&gt;(entity);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_interface.setComponent&lt;<ref refid="structPhysicsStats" kindref="compound">PhysicsStats</ref>&gt;(ps);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(registry.all_of&lt;<ref refid="structHealthComponent" kindref="compound">HealthComponent</ref>&gt;(entity))<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHealthComponent" kindref="compound">HealthComponent</ref>&amp;<sp/>health<sp/>=<sp/>registry.get&lt;<ref refid="structHealthComponent" kindref="compound">HealthComponent</ref>&gt;(entity);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_interface.setComponent&lt;<ref refid="structHealthComponent" kindref="compound">HealthComponent</ref>&gt;(health);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(registry.all_of&lt;<ref refid="structPerceptionComponent" kindref="compound">PerceptionComponent</ref>&gt;(entity))<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPerceptionComponent" kindref="compound">PerceptionComponent</ref>&amp;<sp/>perception<sp/>=<sp/>registry.get&lt;<ref refid="structPerceptionComponent" kindref="compound">PerceptionComponent</ref>&gt;(entity);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_interface.setComponent&lt;<ref refid="structPerceptionComponent" kindref="compound">PerceptionComponent</ref>&gt;(perception);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(registry.all_of&lt;<ref refid="structInventory" kindref="compound">Inventory</ref>&gt;(entity))<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structInventory" kindref="compound">Inventory</ref>&amp;<sp/>inventory<sp/>=<sp/>registry.get&lt;<ref refid="structInventory" kindref="compound">Inventory</ref>&gt;(entity);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entity_interface.setComponent&lt;<ref refid="structInventory" kindref="compound">Inventory</ref>&gt;(inventory);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>entity_interface;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/EntityInterface.cpp"/>
  </compounddef>
</doxygen>
