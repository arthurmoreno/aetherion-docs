<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="aetherion_8cpp" kind="file" language="C++">
    <compoundname>aetherion.cpp</compoundname>
    <includes refid="aetherion_8hpp" local="yes">aetherion.hpp</includes>
    <includes local="no">spdlog/spdlog.h</includes>
    <includes local="no">cstdint</includes>
    <incdepgraph>
      <node id="12">
        <label>CameraUtils.hpp</label>
        <link refid="CameraUtils_8hpp_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>CombatSystem.hpp</label>
        <link refid="CombatSystem_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>EcosystemEngine.hpp</label>
        <link refid="EcosystemEngine_8hpp_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>EffectsSystem.hpp</label>
        <link refid="EffectsSystem_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>EntityInterface.hpp</label>
        <link refid="EntityInterface_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>FlatbufferUtils.hpp</label>
        <link refid="FlatbufferUtils_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>GameClock.hpp</label>
        <link refid="GameClock_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>GameDB.hpp</label>
        <link refid="GameDB_8hpp_source"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>GameDBHandler.hpp</label>
        <link refid="GameDBHandler_8hpp_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>Gui/Gui.hpp</label>
        <link refid="Gui_8hpp_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>Gui/GuiStateManager.hpp</label>
        <link refid="GuiStateManager_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>ItemWindow.hpp</label>
        <link refid="ItemWindow_8hpp_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>HealthSystem.hpp</label>
        <link refid="HealthSystem_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>ItemConfiguration.hpp</label>
        <link refid="ItemConfiguration_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>ItemConfigurationManager.hpp</label>
        <link refid="ItemConfigurationManager_8hpp_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>ItemsEvents.hpp</label>
        <link refid="ItemsEvents_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>LifeEvents.hpp</label>
        <link refid="LifeEvents_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>Logger.hpp</label>
        <link refid="Logger_8hpp_source"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>FontManager.hpp</label>
        <link refid="FontManager_8hpp_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>LowLevelRenderer/RenderQueue.hpp</label>
        <link refid="RenderQueue_8hpp_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>TextureManager.hpp</label>
        <link refid="TextureManager_8hpp_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>MetabolismSystem.hpp</label>
        <link refid="MetabolismSystem_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="84">
        <label>MoveEntityEvent.hpp</label>
        <link refid="MoveEntityEvent_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>PerceptionResponse.hpp</label>
        <link refid="PerceptionResponse_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>PhysicsEngine.hpp</label>
        <link refid="PhysicsEngine_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>PhysicsManager.hpp</label>
        <link refid="PhysicsManager_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>PyRegistry.hpp</label>
        <link refid="PyRegistry_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>QueryCommand.hpp</label>
        <link refid="QueryCommand_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>QueryResponse.hpp</label>
        <link refid="QueryResponse_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>SunIntensity.hpp</label>
        <link refid="SunIntensity_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>VoxelGrid.hpp</label>
        <link refid="VoxelGrid_8hpp_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>World.hpp</label>
        <link refid="World_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>WorldView.hpp</label>
        <link refid="WorldView_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/aetherion.cpp</label>
        <link refid="aetherion_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>aetherion.hpp</label>
        <link refid="aetherion_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>components/CombatComponents.hpp</label>
        <link refid="CombatComponents_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>components/ConsoleLogsComponent.hpp</label>
        <link refid="ConsoleLogsComponent_8hpp_source"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>components/DnaComponents.hpp</label>
        <link refid="DnaComponents_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>components/EntityTypeComponent.hpp</label>
        <link refid="EntityTypeComponent_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>components/HealthComponents.hpp</label>
        <link refid="HealthComponents_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>components/ItemsComponents.hpp</label>
        <link refid="ItemsComponents_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>components/MetabolismComponents.hpp</label>
        <link refid="MetabolismComponents_8hpp_source"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>components/MovingComponent.hpp</label>
        <link refid="MovingComponent_8hpp_source"/>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>components/PerceptionComponent.hpp</label>
        <link refid="PerceptionComponent_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>components/PhysicsComponents.hpp</label>
        <link refid="PhysicsComponents_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>components/PlantsComponents.hpp</label>
        <link refid="PlantsComponents_8hpp_source"/>
      </node>
      <node id="41">
        <label>components/TerrainComponents.hpp</label>
        <link refid="TerrainComponents_8hpp_source"/>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>components/TimeSeriesComponent.hpp</label>
        <link refid="TimeSeriesComponent_8hpp_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>genes.hpp</label>
        <link refid="genes_8hpp_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>neat/genome.hpp</label>
        <link refid="genome_8hpp_source"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>EntityInterface_generated.h</label>
      </node>
      <node id="58">
        <label>PerceptionResponse_generated.h</label>
      </node>
      <node id="44">
        <label>SDL2/SDL.h</label>
      </node>
      <node id="50">
        <label>SDL2/SDL_image.h</label>
      </node>
      <node id="45">
        <label>SDL2/SDL_ttf.h</label>
      </node>
      <node id="64">
        <label>VoxelGridView_generated.h</label>
      </node>
      <node id="65">
        <label>WorldView_generated.h</label>
      </node>
      <node id="34">
        <label>algorithm</label>
      </node>
      <node id="14">
        <label>bitset</label>
      </node>
      <node id="21">
        <label>chrono</label>
      </node>
      <node id="30">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="22">
        <label>ctime</label>
      </node>
      <node id="15">
        <label>entt/entt.hpp</label>
      </node>
      <node id="60">
        <label>flatbuffers/flatbuffers.h</label>
      </node>
      <node id="51">
        <label>functional</label>
      </node>
      <node id="73">
        <label>future</label>
      </node>
      <node id="67">
        <label>imgui/backends/imgui_impl_sdl2.h</label>
      </node>
      <node id="68">
        <label>imgui/backends/imgui_impl_sdlrenderer2.h</label>
      </node>
      <node id="69">
        <label>imgui/imgui.h</label>
      </node>
      <node id="70">
        <label>imgui/implot.h</label>
      </node>
      <node id="23">
        <label>iomanip</label>
      </node>
      <node id="31">
        <label>iostream</label>
      </node>
      <node id="24">
        <label>map</label>
      </node>
      <node id="48">
        <label>memory</label>
      </node>
      <node id="54">
        <label>msgpack.hpp</label>
      </node>
      <node id="46">
        <label>mutex</label>
      </node>
      <node id="3">
        <label>nanobind/nanobind.h</label>
      </node>
      <node id="4">
        <label>nanobind/operators.h</label>
      </node>
      <node id="5">
        <label>nanobind/stl/bind_map.h</label>
      </node>
      <node id="6">
        <label>nanobind/stl/bind_vector.h</label>
      </node>
      <node id="56">
        <label>nanobind/stl/shared_ptr.h</label>
      </node>
      <node id="7">
        <label>nanobind/stl/string.h</label>
      </node>
      <node id="8">
        <label>nanobind/stl/unique_ptr.h</label>
      </node>
      <node id="9">
        <label>nanobind/stl/variant.h</label>
      </node>
      <node id="62">
        <label>openvdb/openvdb.h</label>
      </node>
      <node id="63">
        <label>openvdb/tools/Interpolation.h</label>
      </node>
      <node id="102">
        <label>random</label>
      </node>
      <node id="83">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="10">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="90">
        <label>sqlite3.h</label>
      </node>
      <node id="25">
        <label>sstream</label>
      </node>
      <node id="35">
        <label>stdexcept</label>
      </node>
      <node id="26">
        <label>string</label>
      </node>
      <node id="16">
        <label>tuple</label>
      </node>
      <node id="17">
        <label>type_traits</label>
      </node>
      <node id="52">
        <label>unordered_map</label>
      </node>
      <node id="42">
        <label>unordered_set</label>
      </node>
      <node id="18">
        <label>utility</label>
      </node>
      <node id="81">
        <label>variant</label>
      </node>
      <node id="28">
        <label>vector</label>
      </node>
      <node id="19">
        <label>ylt/struct_pack.hpp</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="aetherion_8cpp_1ad7089c0adace2f1bf6f879b053ef3c91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NB_MAKE_OPAQUE</definition>
        <argsstring>(entt::entity)</argsstring>
        <name>NB_MAKE_OPAQUE</name>
        <param>
          <type>entt::entity</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aetherion.cpp" line="38" column="1" declfile="src/aetherion.cpp" declline="38" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="aetherion_8cpp_1a1e7a7f18e5689187e61c9886aca96c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nb::object</type>
        <definition>nb::object variant_to_pyobject</definition>
        <argsstring>(const ItemConfiguration::DefaultValue &amp;var)</argsstring>
        <name>variant_to_pyobject</name>
        <param>
          <type>const ItemConfiguration::DefaultValue &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aetherion.cpp" line="41" column="12" bodyfile="src/aetherion.cpp" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="aetherion_8cpp_1ae6f56f6b0b34f13aa555b72b2c20d9b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NB_MODULE</definition>
        <argsstring>(_aetherion, m)</argsstring>
        <name>NB_MODULE</name>
        <param>
          <type>_aetherion</type>
        </param>
        <param>
          <type>m</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aetherion.cpp" line="45" column="1" bodyfile="src/aetherion.cpp" bodystart="45" bodyend="1045"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>#include<sp/>&lt;SDL2/SDL.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;SDL2/SDL_image.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;imgui/backends/imgui_impl_sdl2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;imgui/backends/imgui_impl_sdlrenderer2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>ENTT_ENTITY_TYPE<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;aetherion.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;nanobind/nanobind.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;nanobind/operators.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;nanobind/stl/bind_map.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;nanobind/stl/bind_vector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;nanobind/stl/string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;nanobind/stl/unique_ptr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;nanobind/stl/variant.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/spdlog.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;CameraUtils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;EntityInterface.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;Gui/Gui.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;Gui/GuiStateManager.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;ItemConfiguration.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;ItemConfigurationManager.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;Logger.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;LowLevelRenderer/RenderQueue.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;LowLevelRenderer/TextureManager.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;PyRegistry.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;VoxelGrid.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;World.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&quot;neat/genome.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>shortcut<sp/>for<sp/>nanobind</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">nb<sp/>=<sp/>nanobind;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">NB_MAKE_OPAQUE(entt::entity);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>to<sp/>convert<sp/>std::variant<sp/>to<sp/>nb::object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">nb::object<sp/>variant_to_pyobject(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ItemConfiguration::DefaultValue&amp;<sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::visit([](</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>arg)<sp/>-&gt;<sp/>nb::object<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nb::cast(arg);<sp/>},<sp/>var);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">NB_MODULE(_aetherion,<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::bind_map&lt;std::map&lt;std::string,<sp/>int&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MapStrInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::bind_map&lt;std::map&lt;std::string,<sp/>std::string&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MapStrStr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::bind_map&lt;std::map&lt;std::string,<sp/>double&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MapStrDouble&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::bind_map&lt;std::map&lt;std::string,<sp/>std::map&lt;std::string,<sp/>std::string&gt;&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MapStrMapStrStr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::bind_map&lt;std::map&lt;std::string,<sp/>std::map&lt;std::string,<sp/>double&gt;&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MapStrMapStrDouble&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::bind_vector&lt;std::vector&lt;std::string&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;VecStr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::bind_vector&lt;std::vector&lt;int&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;VecInt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>EntityEnum<sp/>as<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;EntityEnum_TERRAIN&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EntityEnum::TERRAIN);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;EntityEnum_BEAST&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EntityEnum::BEAST);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;EntityEnum_PLANT&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EntityEnum::PLANT);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;EntityEnum_TILE_EFFECT&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EntityEnum::TILE_EFFECT);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;PlantEnum_RASPBERRY&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(PlantEnum::RASPBERRY);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>TerrainEnum<sp/>as<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;TerrainEnum_EMPTY&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TerrainEnum::EMPTY);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;TerrainEnum_GRASS&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TerrainEnum::GRASS);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;TerrainEnum_WATER&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TerrainEnum::WATER);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>TerrainEnum<sp/>as<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;DirectionEnum_UP&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(DirectionEnum::UP);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;DirectionEnum_RIGHT&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(DirectionEnum::RIGHT);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;DirectionEnum_DOWN&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(DirectionEnum::DOWN);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;DirectionEnum_LEFT&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(DirectionEnum::LEFT);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;DirectionEnum_UPWARD&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(DirectionEnum::UPWARD);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>m.attr(</highlight><highlight class="stringliteral">&quot;DirectionEnum_DOWNWARD&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(DirectionEnum::DOWNWARD);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>the<sp/>Logger<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;Logger&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;Logger&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_static(</highlight><highlight class="stringliteral">&quot;initialize&quot;</highlight><highlight class="normal">,<sp/>&amp;Logger::initialize,<sp/></highlight><highlight class="stringliteral">&quot;Initialize<sp/>the<sp/>logger&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_static(</highlight><highlight class="stringliteral">&quot;get_logger&quot;</highlight><highlight class="normal">,<sp/>&amp;Logger::getLogger,<sp/></highlight><highlight class="stringliteral">&quot;Get<sp/>the<sp/>logger<sp/>instance&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">,<sp/>&amp;Logger::info,<sp/></highlight><highlight class="stringliteral">&quot;Log<sp/>an<sp/>info<sp/>message&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;warn&quot;</highlight><highlight class="normal">,<sp/>&amp;Logger::warn,<sp/></highlight><highlight class="stringliteral">&quot;Log<sp/>a<sp/>warning<sp/>message&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">,<sp/>&amp;Logger::error,<sp/></highlight><highlight class="stringliteral">&quot;Log<sp/>an<sp/>error<sp/>message&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;critical&quot;</highlight><highlight class="normal">,<sp/>&amp;Logger::critical,<sp/></highlight><highlight class="stringliteral">&quot;Log<sp/>a<sp/>critical<sp/>message&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">,<sp/>&amp;Logger::debug,<sp/></highlight><highlight class="stringliteral">&quot;Log<sp/>a<sp/>debug<sp/>message&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;trace&quot;</highlight><highlight class="normal">,<sp/>&amp;Logger::trace,<sp/></highlight><highlight class="stringliteral">&quot;Log<sp/>a<sp/>trace<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;imgui_init&quot;</highlight><highlight class="normal">,<sp/>&amp;imguiInit,<sp/></highlight><highlight class="stringliteral">&quot;Load<sp/>an<sp/>image<sp/>and<sp/>create<sp/>a<sp/>texture&quot;</highlight><highlight class="normal">,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;window_ptr&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;gl_context_ptr&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;imgui_prepare_windows&quot;</highlight><highlight class="normal">,<sp/>&amp;imguiPrepareWindows);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;imgui_process_event&quot;</highlight><highlight class="normal">,<sp/>&amp;imguiProcessEvent);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;imgui_render&quot;</highlight><highlight class="normal">,<sp/>&amp;imguiRender,<sp/></highlight><highlight class="stringliteral">&quot;Load<sp/>an<sp/>image<sp/>and<sp/>create<sp/>a<sp/>texture&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;renderer_ptr&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;load_texture&quot;</highlight><highlight class="normal">,<sp/>&amp;load_texture,<sp/></highlight><highlight class="stringliteral">&quot;Load<sp/>an<sp/>image<sp/>and<sp/>create<sp/>a<sp/>texture&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;renderer_ptr&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;image_path&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;render_texture&quot;</highlight><highlight class="normal">,<sp/>&amp;render_texture,<sp/></highlight><highlight class="stringliteral">&quot;Render<sp/>a<sp/>texture&quot;</highlight><highlight class="normal">,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;renderer_ptr&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;texture_ptr&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;destroy_texture&quot;</highlight><highlight class="normal">,<sp/>&amp;destroy_texture,<sp/></highlight><highlight class="stringliteral">&quot;Destroy<sp/>a<sp/>texture&quot;</highlight><highlight class="normal">,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;texture_ptr&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;load_texture_on_manager&quot;</highlight><highlight class="normal">,<sp/>&amp;loadTextureOnManager);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;render_texture_from_manager&quot;</highlight><highlight class="normal">,<sp/>&amp;renderTextureFromManager);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;wants_capture_keyboard&quot;</highlight><highlight class="normal">,<sp/>&amp;wants_capture_keyboard,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>True<sp/>if<sp/>ImGui<sp/>wants<sp/>to<sp/>capture<sp/>keyboard<sp/>inputs,<sp/>False<sp/>otherwise&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;wants_capture_mouse&quot;</highlight><highlight class="normal">,<sp/>&amp;wants_capture_mouse,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>True<sp/>if<sp/>ImGui<sp/>wants<sp/>to<sp/>capture<sp/>mouse<sp/>inputs,<sp/>False<sp/>otherwise&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;get_water_camera_stats&quot;</highlight><highlight class="normal">,<sp/>&amp;getWaterCameraStats,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>value<sp/>if<sp/>the<sp/>water<sp/>camera<sp/>feature<sp/>is<sp/>on<sp/>or<sp/>off.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;get_terrain_camera_stats&quot;</highlight><highlight class="normal">,<sp/>&amp;getTerrainCameraStats,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>value<sp/>if<sp/>the<sp/>water<sp/>camera<sp/>feature<sp/>is<sp/>on<sp/>or<sp/>off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nb::class_&lt;RenderTask&gt;(m,<sp/>&quot;RenderTask&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;SDL_Texture*,<sp/>int,<sp/>int&gt;())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def_rw(&quot;texture&quot;,<sp/>&amp;RenderTask::texture)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def_rw(&quot;x&quot;,<sp/>&amp;RenderTask::x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def_rw(&quot;y&quot;,<sp/>&amp;RenderTask::y);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;RenderQueue&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;RenderQueue&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;add_task_by_id&quot;</highlight><highlight class="normal">,<sp/>&amp;RenderQueue::add_task_by_id)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;add_task_by_texture&quot;</highlight><highlight class="normal">,<sp/>&amp;RenderQueue::add_task_by_texture)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Updated<sp/>add_task_rect<sp/>binding<sp/>to<sp/>accept<sp/>a<sp/>tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;add_task_rect&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classRenderQueue" kindref="compound">RenderQueue</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_layer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>priority_group,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>nb::tuple<sp/>color)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>alpha<sp/>to<sp/>255<sp/>(opaque)<sp/>if<sp/>not<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Color<sp/>sdl_color<sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>255};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color.size()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.r<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[0]);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.g<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[1]);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.b<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[2]);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if<sp/>(color.size()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.r<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[0]);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.g<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[1]);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.b<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[2]);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.a<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[3]);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Color<sp/>tuple<sp/>must<sp/>have<sp/>3<sp/>(RGB)<sp/>or<sp/>4<sp/>(RGBA)<sp/>elements&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.add_task_rect(z_layer,<sp/>priority_group,<sp/>x,<sp/>y,<sp/>width,<sp/>height,<sp/>sdl_color);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_layer&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;priority_group&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;color&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Add<sp/>a<sp/>RenderRectTask<sp/>with<sp/>color<sp/>as<sp/>a<sp/>tuple<sp/>(R,<sp/>G,<sp/>B[,<sp/>A])&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;add_task_draw_rect&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classRenderQueue" kindref="compound">RenderQueue</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_layer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>priority_group,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thickness,<sp/>nb::tuple<sp/>color)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>alpha<sp/>to<sp/>255<sp/>(opaque)<sp/>if<sp/>not<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Color<sp/>sdl_color<sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>255};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color.size()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.r<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[0]);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.g<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[1]);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.b<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[2]);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color.size()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.r<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[0]);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.g<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[1]);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.b<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[2]);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.a<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[3]);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Color<sp/>tuple<sp/>must<sp/>have<sp/>3<sp/>(RGB)<sp/>or<sp/>4<sp/>(RGBA)<sp/>elements&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.add_task_draw_rect(z_layer,<sp/>priority_group,<sp/>x,<sp/>y,<sp/>width,<sp/>height,<sp/>thickness,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_layer&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;priority_group&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;thickness&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;color&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Add<sp/>a<sp/>RenderRectTask<sp/>with<sp/>color<sp/>as<sp/>a<sp/>tuple<sp/>(R,<sp/>G,<sp/>B[,<sp/>A])&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Updated<sp/>add_task_line<sp/>binding<sp/>to<sp/>accept<sp/>a<sp/>tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;add_task_line&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classRenderQueue" kindref="compound">RenderQueue</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_layer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>priority_group,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y1,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y2,<sp/>nb::tuple<sp/>color)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>alpha<sp/>to<sp/>255<sp/>(opaque)<sp/>if<sp/>not<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Color<sp/>sdl_color<sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>255};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color.size()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.r<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[0]);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.g<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[1]);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.b<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[2]);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color.size()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.r<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[0]);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.g<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[1]);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.b<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[2]);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.a<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[3]);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Color<sp/>tuple<sp/>must<sp/>have<sp/>3<sp/>(RGB)<sp/>or<sp/>4<sp/>(RGBA)<sp/>elements&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.add_task_line(z_layer,<sp/>priority_group,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>sdl_color);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_layer&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;priority_group&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x1&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y1&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x2&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y2&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;color&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Add<sp/>a<sp/>RenderLineTask<sp/>with<sp/>color<sp/>as<sp/>a<sp/>tuple<sp/>(R,<sp/>G,<sp/>B[,<sp/>A])&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Updated<sp/>add_task_line<sp/>binding<sp/>to<sp/>accept<sp/>a<sp/>tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;add_task_text&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classRenderQueue" kindref="compound">RenderQueue</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_layer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>priority_group,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>text,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>font_id,<sp/>nb::tuple<sp/>color,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>alpha<sp/>to<sp/>255<sp/>(opaque)<sp/>if<sp/>not<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_Color<sp/>sdl_color<sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>255};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color.size()<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.r<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[0]);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.g<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[1]);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.b<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[2]);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(color.size()<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.r<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[0]);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.g<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[1]);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.b<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[2]);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdl_color.a<sp/>=<sp/>nb::cast&lt;uint8_t&gt;(color[3]);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Color<sp/>tuple<sp/>must<sp/>have<sp/>3<sp/>(RGB)<sp/>or<sp/>4<sp/>(RGBA)<sp/>elements&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.add_task_text(z_layer,<sp/>priority_group,<sp/>text,<sp/>font_id,<sp/>sdl_color,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_layer&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;priority_group&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x1&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y1&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x2&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y2&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;color&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Add<sp/>a<sp/>RenderLineTask<sp/>with<sp/>color<sp/>as<sp/>a<sp/>tuple<sp/>(R,<sp/>G,<sp/>B[,<sp/>A])&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;clear&quot;</highlight><highlight class="normal">,<sp/>&amp;RenderQueue::clear)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_sorted_layers&quot;</highlight><highlight class="normal">,<sp/>&amp;RenderQueue::get_sorted_layers)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_priority_order_value&quot;</highlight><highlight class="normal">,<sp/>&amp;RenderQueue::get_priority_order_value)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_sorted_priority_groups&quot;</highlight><highlight class="normal">,<sp/>&amp;RenderQueue::get_sorted_priority_groups)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_priority_order&quot;</highlight><highlight class="normal">,<sp/>&amp;RenderQueue::set_priority_order)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;render&quot;</highlight><highlight class="normal">,<sp/>&amp;RenderQueue::render);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>the<sp/>ItemConfiguration<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;ItemConfiguration&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ItemConfiguration&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;const<sp/>std::string&amp;&gt;(),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;item_id&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_in_game_textures&quot;</highlight><highlight class="normal">,<sp/>&amp;ItemConfiguration::setInGameTextures,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;textures&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_inventory_textures&quot;</highlight><highlight class="normal">,<sp/>&amp;ItemConfiguration::setInventoryTextures,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;textures&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_default_value&quot;</highlight><highlight class="normal">,<sp/>&amp;ItemConfiguration::setDefaultValue,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_item_id&quot;</highlight><highlight class="normal">,<sp/>&amp;ItemConfiguration::getItemId)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_in_game_textures&quot;</highlight><highlight class="normal">,<sp/>&amp;ItemConfiguration::getInGameTextures)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_inventory_textures&quot;</highlight><highlight class="normal">,<sp/>&amp;ItemConfiguration::getInventoryTextures)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_default_value&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classItemConfiguration" kindref="compound">ItemConfiguration</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)<sp/>-&gt;<sp/>nb::object<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>value<sp/>=<sp/>self.getDefaultValue(key);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nb::none();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>variant_to_pyobject(*value);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__del__&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="classItemConfiguration" kindref="compound">ItemConfiguration</ref>*<sp/>self)<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>self;<sp/>});</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;register_item_configuration&quot;</highlight><highlight class="normal">,<sp/>&amp;registerItemConfigurationOnManager,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;config&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Register<sp/>an<sp/>ItemConfiguration<sp/>and<sp/>return<sp/>a<sp/>handle<sp/>(uintptr_t).&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;get_item_configuration&quot;</highlight><highlight class="normal">,<sp/>&amp;getItemConfigurationOnManager,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;item_id&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Retrieve<sp/>an<sp/>ItemConfiguration<sp/>by<sp/>item_id.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;deregister_item_configuration&quot;</highlight><highlight class="normal">,<sp/>&amp;deregisterItemConfigurationOnManager,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;item_id&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Deregister<sp/>an<sp/>ItemConfiguration<sp/>by<sp/>item_id.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>the<sp/>GridData<sp/>struct<sp/>to<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;GridData&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;GridData&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;int,<sp/>int,<sp/>int,<sp/>float&gt;(),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;terrainID&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;entityID&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;eventID&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;lightingLevel&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;terrainID&quot;</highlight><highlight class="normal">,<sp/>&amp;GridData::terrainID)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;entityID&quot;</highlight><highlight class="normal">,<sp/>&amp;GridData::entityID)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;eventID&quot;</highlight><highlight class="normal">,<sp/>&amp;GridData::eventID)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;lightingLevel&quot;</highlight><highlight class="normal">,<sp/>&amp;GridData::lightingLevel);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exposing<sp/>EntityEnum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::enum_&lt;GridType&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;GridType&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;TERRAIN&quot;</highlight><highlight class="normal">,<sp/>GridType::TERRAIN)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;ENTITY&quot;</highlight><highlight class="normal">,<sp/>GridType::ENTITY)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.export_values();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;World&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;int,<sp/>int,<sp/>int&gt;())</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">,<sp/>&amp;World::width)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">,<sp/>&amp;World::height)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;depth&quot;</highlight><highlight class="normal">,<sp/>&amp;World::depth)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;game_clock&quot;</highlight><highlight class="normal">,<sp/>&amp;World::gameClock)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;initialize_voxel_grid&quot;</highlight><highlight class="normal">,<sp/>&amp;World::initializeVoxelGrid)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_voxel&quot;</highlight><highlight class="normal">,<sp/>&amp;World::setVoxel)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_voxel&quot;</highlight><highlight class="normal">,<sp/>&amp;World::getVoxel)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;create_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;World::createEntityFromPython)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;remove_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;World::removeEntity)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entities_by_type&quot;</highlight><highlight class="normal">,<sp/>&amp;World::getEntitiesByType)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity_ids_by_type&quot;</highlight><highlight class="normal">,<sp/>&amp;World::getEntityIdsByType)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity_by_id&quot;</highlight><highlight class="normal">,<sp/>&amp;World::getEntityById,<sp/></highlight><highlight class="stringliteral">&quot;Retrieve<sp/>an<sp/>EntityInterface<sp/>by<sp/>entity<sp/>ID&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;create_perception_response&quot;</highlight><highlight class="normal">,<sp/>&amp;World::createPerceptionResponse)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;create_perception_responses&quot;</highlight><highlight class="normal">,<sp/>&amp;World::createPerceptionResponses)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_terrain&quot;</highlight><highlight class="normal">,<sp/>&amp;World::setTerrain)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_terrain&quot;</highlight><highlight class="normal">,<sp/>&amp;World::getTerrain)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;World::getEntity)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;add_python_system&quot;</highlight><highlight class="normal">,<sp/>&amp;World::addPythonSystem)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_python_system&quot;</highlight><highlight class="normal">,<sp/>&amp;World::getPythonSystem)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;add_python_script&quot;</highlight><highlight class="normal">,<sp/>&amp;World::addPythonScript)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;run_python_script&quot;</highlight><highlight class="normal">,<sp/>&amp;World::runPythonScript)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;update&quot;</highlight><highlight class="normal">,<sp/>&amp;World::update)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;dispatch_move_entity_event_by_pos&quot;</highlight><highlight class="normal">,<sp/>&amp;World::dispatchMoveSolidEntityEventByPosition)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;dispatch_move_entity_event_by_id&quot;</highlight><highlight class="normal">,<sp/>&amp;World::dispatchMoveSolidEntityEventById)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;dispatch_take_item_event_by_id&quot;</highlight><highlight class="normal">,<sp/>&amp;World::dispatchTakeItemEventById)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;dispatch_use_item_event_by_id&quot;</highlight><highlight class="normal">,<sp/>&amp;World::dispatchUseItemEventById)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;dispatch_set_entity_to_debug&quot;</highlight><highlight class="normal">,<sp/>&amp;World::dispatchSetEntityToDebug)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_ptr&quot;</highlight><highlight class="normal">,<sp/>&amp;World::get_ptr)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Updated<sp/>method<sp/>bindings<sp/>for<sp/>GameDBHandler<sp/>interface<sp/>with<sp/>automatic<sp/>type<sp/>conversion:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;put_time_series&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classWorld" kindref="compound">World</ref>&amp;<sp/>w,<sp/>nb::object<sp/>seriesName,<sp/>nb::object<sp/>timestamp,<sp/>nb::object<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[binding<sp/>World::put_time_series]<sp/>Called&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>nb::cast&lt;std::string&gt;(seriesName);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ts<sp/>=<sp/>nb::cast&lt;long<sp/>long&gt;(timestamp);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>nb::cast&lt;double&gt;(value);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.putTimeSeries(name,<sp/>ts,<sp/>v);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;query_time_series&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classWorld" kindref="compound">World</ref>&amp;<sp/>w,<sp/>nb::object<sp/>seriesName,<sp/>nb::object<sp/>start,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::object<sp/>end)<sp/>-&gt;<sp/>std::vector&lt;std::pair&lt;uint64_t,<sp/>double&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>nb::cast&lt;std::string&gt;(seriesName);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>nb::cast&lt;long<sp/>long&gt;(start);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>e<sp/>=<sp/>nb::cast&lt;long<sp/>long&gt;(end);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w.queryTimeSeries(name,<sp/>s,<sp/>e);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;execute_sql&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="classWorld" kindref="compound">World</ref>&amp;<sp/>w,<sp/>nb::object<sp/>sql)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>s<sp/>=<sp/>nb::cast&lt;std::string&gt;(sql);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w.executeSQL(s);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exposing<sp/>entt::entity<sp/>as<sp/>an<sp/>unsigned<sp/>integer<sp/>to<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;entt::entity&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;Entity&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__repr__&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>entt::entity&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;Entity<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(e))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_id&quot;</highlight><highlight class="normal">,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>entt::entity&amp;<sp/>e)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(e);<sp/>},</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Get<sp/>the<sp/>raw<sp/>ID<sp/>of<sp/>the<sp/>entity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;WorldView&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;WorldView&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())<sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>the<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::width)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::height)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;depth&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::depth)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;voxelGridView&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::voxelGridView)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;entities&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::entities)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;addEntity&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::addEntity,<sp/></highlight><highlight class="stringliteral">&quot;Add<sp/>an<sp/>entity<sp/>with<sp/>a<sp/>given<sp/>ID&quot;</highlight><highlight class="normal">,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;entity&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;hasEntity&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::hasEntity,<sp/></highlight><highlight class="stringliteral">&quot;Check<sp/>if<sp/>an<sp/>entity<sp/>exists<sp/>by<sp/>its<sp/>ID&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;id&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;printAllEntityIds&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::printAllEntityIds,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Print<sp/>all<sp/>entity<sp/>IDs<sp/>for<sp/>debugging&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;serialize_flatbuffer&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::pySerializeFlatBuffers)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_static(</highlight><highlight class="stringliteral">&quot;deserialize_flatbuffer&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::deserializeFlatBuffers)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity_by_id&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::pyGetEntityById,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Retrieve<sp/>an<sp/>EntityInterface<sp/>by<sp/>entity<sp/>ID&quot;</highlight><highlight class="normal">,<sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_terrain_id&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::getTerrainId,<sp/></highlight><highlight class="stringliteral">&quot;Retrieve<sp/>an<sp/>EntityInterface<sp/>by<sp/>coords&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity_id&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::getEntityId,<sp/></highlight><highlight class="stringliteral">&quot;Retrieve<sp/>an<sp/>EntityInterface<sp/>by<sp/>coords&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_terrain&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::getTerrain,<sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::getEntity,<sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;check_if_terrain_exist&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::checkIfTerrainExist)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;check_if_entity_exist&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldView::checkIfEntityExist);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;WorldViewFlatB&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;WorldViewFlatB&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;nb::bytes&gt;())</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getWidth&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldViewFlatB::getWidth,<sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getHeight&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldViewFlatB::getHeight,<sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getDepth&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldViewFlatB::getDepth,<sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getVoxelGrid&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldViewFlatB::getVoxelGrid,<sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getEntityById&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldViewFlatB::getEntityById,<sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_terrain&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldViewFlatB::getTerrain,<sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;WorldViewFlatB::getEntity,<sp/>nb::rv_policy::reference_internal);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;PerceptionResponse&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;PerceptionResponse&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;const<sp/>EntityInterface&amp;,<sp/>const<sp/>WorldView&amp;&gt;())</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;serialize_flatbuffer&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionResponse::pySerializeFlatBuffer)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;entity&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionResponse::entity,<sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;world_view&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionResponse::world_view,<sp/>nb::rv_policy::reference_internal);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;QueryResponse&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;QueryResponse&quot;</highlight><highlight class="normal">).def(</highlight><highlight class="stringliteral">&quot;serialize&quot;</highlight><highlight class="normal">,<sp/>&amp;QueryResponse::py_serialize);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>ListStringResponse<sp/>derived<sp/>from<sp/>QueryResponse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;ListStringResponse,<sp/>QueryResponse&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ListStringResponse&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;&gt;())</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;strings&quot;</highlight><highlight class="normal">,<sp/>&amp;ListStringResponse::strings)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;serialize&quot;</highlight><highlight class="normal">,<sp/>&amp;ListStringResponse::py_serialize);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>MapOfMapsResponse<sp/>derived<sp/>from<sp/>QueryResponse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;MapOfMapsResponse,<sp/>QueryResponse&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MapOfMapsResponse&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::map&lt;std::string,<sp/>std::string&gt;&gt;&amp;&gt;())</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;mapOfMaps&quot;</highlight><highlight class="normal">,<sp/>&amp;MapOfMapsResponse::mapOfMaps)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;serialize&quot;</highlight><highlight class="normal">,<sp/>&amp;MapOfMapsResponse::py_serialize);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>MapOfMapsOfDoubleResponse<sp/>derived<sp/>from<sp/>QueryResponse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;MapOfMapsOfDoubleResponse,<sp/>QueryResponse&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MapOfMapsOfDoubleResponse&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::map&lt;std::string,<sp/>double&gt;&gt;&amp;&gt;())</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;mapOfMaps&quot;</highlight><highlight class="normal">,<sp/>&amp;MapOfMapsOfDoubleResponse::mapOfMaps)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;serialize&quot;</highlight><highlight class="normal">,<sp/>&amp;MapOfMapsOfDoubleResponse::py_serialize);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;PerceptionResponseFlatB&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;PerceptionResponseFlatB&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;nb::bytes&gt;())</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getWorldView&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionResponseFlatB::getWorldView,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getEntity&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionResponseFlatB::getEntity,<sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_item_from_inventory_by_id&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionResponseFlatB::getItemFromInventoryById,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_query_response_by_id&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionResponseFlatB::getQueryResponseById,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_ticks&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionResponseFlatB::getTicks,<sp/>nb::rv_policy::reference_internal);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;PhysicsStats&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;PhysicsStats&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;float&gt;())</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal">,<sp/>&amp;PhysicsStats::print)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/>&amp;PhysicsStats::mass)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;max_speed&quot;</highlight><highlight class="normal">,<sp/>&amp;PhysicsStats::maxSpeed)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;min_speed&quot;</highlight><highlight class="normal">,<sp/>&amp;PhysicsStats::minSpeed)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;force_x&quot;</highlight><highlight class="normal">,<sp/>&amp;PhysicsStats::forceX)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;force_y&quot;</highlight><highlight class="normal">,<sp/>&amp;PhysicsStats::forceY)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;force_z&quot;</highlight><highlight class="normal">,<sp/>&amp;PhysicsStats::forceZ);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::enum_&lt;DirectionEnum&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;DirectionEnum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;UP&quot;</highlight><highlight class="normal">,<sp/>DirectionEnum::UP)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;RIGHT&quot;</highlight><highlight class="normal">,<sp/>DirectionEnum::RIGHT)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;DOWN&quot;</highlight><highlight class="normal">,<sp/>DirectionEnum::DOWN)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;LEFT&quot;</highlight><highlight class="normal">,<sp/>DirectionEnum::LEFT)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;UPWARD&quot;</highlight><highlight class="normal">,<sp/>DirectionEnum::UPWARD)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;DOWNWARD&quot;</highlight><highlight class="normal">,<sp/>DirectionEnum::DOWNWARD)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.export_values();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::bind_vector&lt;std::vector&lt;DirectionEnum&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;VecDirectionEnum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::enum_&lt;MatterState&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MatterState&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;SOLID&quot;</highlight><highlight class="normal">,<sp/>MatterState::SOLID)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;LIQUID&quot;</highlight><highlight class="normal">,<sp/>MatterState::LIQUID)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;GAS&quot;</highlight><highlight class="normal">,<sp/>MatterState::GAS)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;PLASMA&quot;</highlight><highlight class="normal">,<sp/>MatterState::PLASMA)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.export_values();</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;Position&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;Position&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_direction_as_int&quot;</highlight><highlight class="normal">,<sp/>&amp;Position::getDirectionAsInt)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal">,<sp/>&amp;Position::print)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;distance&quot;</highlight><highlight class="normal">,<sp/>&amp;Position::distance)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>&amp;Position::x)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/>&amp;Position::y)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">,<sp/>&amp;Position::z)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;direction&quot;</highlight><highlight class="normal">,<sp/>&amp;Position::direction);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;Velocity&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;Velocity&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal">,<sp/>&amp;Velocity::print)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;speed&quot;</highlight><highlight class="normal">,<sp/>&amp;Velocity::speed)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;vx&quot;</highlight><highlight class="normal">,<sp/>&amp;Velocity::vx)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;vy&quot;</highlight><highlight class="normal">,<sp/>&amp;Velocity::vy)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;vz&quot;</highlight><highlight class="normal">,<sp/>&amp;Velocity::vz);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;GradientVector&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;GradientVector&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;gx&quot;</highlight><highlight class="normal">,<sp/>&amp;GradientVector::gx)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;gy&quot;</highlight><highlight class="normal">,<sp/>&amp;GradientVector::gy)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;gz&quot;</highlight><highlight class="normal">,<sp/>&amp;GradientVector::gz);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;StructuralIntegrityComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;StructuralIntegrityComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;can_stack_entities&quot;</highlight><highlight class="normal">,<sp/>&amp;StructuralIntegrityComponent::canStackEntities)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;max_load_capacity&quot;</highlight><highlight class="normal">,<sp/>&amp;StructuralIntegrityComponent::maxLoadCapacity)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;matter_state&quot;</highlight><highlight class="normal">,<sp/>&amp;StructuralIntegrityComponent::matterState);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;MovingComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MovingComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;is_moving&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::isMoving)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;moving_from_x&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::movingFromX)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;moving_from_y&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::movingFromY)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;moving_from_z&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::movingFromZ)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;moving_to_x&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::movingToX)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;moving_to_y&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::movingToY)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;moving_to_z&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::movingToZ)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;vx&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::vx)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;vy&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::vy)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;vz&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::vz)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;will_stop_x&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::willStopX)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;will_stop_y&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::willStopY)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;will_stop_z&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::willStopZ)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;completion_time&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::completionTime)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;time_remaining&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::timeRemaining)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;direction&quot;</highlight><highlight class="normal">,<sp/>&amp;MovingComponent::direction);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;HealthComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;HealthComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal">,<sp/>&amp;HealthComponent::print)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;health_level&quot;</highlight><highlight class="normal">,<sp/>&amp;HealthComponent::healthLevel)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;max_health&quot;</highlight><highlight class="normal">,<sp/>&amp;HealthComponent::maxHealth);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;PerceptionComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;PerceptionComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;perception_area&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionComponent::perception_area)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;z_perception_area&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionComponent::z_perception_area)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_perception_area&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionComponent::getPerceptionArea)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_perception_area&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionComponent::setPerceptionArea)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_z_perception_area&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionComponent::getZPerceptionArea)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_z_perception_area&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionComponent::setZPerceptionArea)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal">,<sp/>&amp;PerceptionComponent::print);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exposing<sp/>EntityEnum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::enum_&lt;EntityEnum&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;EntityEnum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;TERRAIN&quot;</highlight><highlight class="normal">,<sp/>EntityEnum::TERRAIN)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;BEAST&quot;</highlight><highlight class="normal">,<sp/>EntityEnum::BEAST)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;PLANT&quot;</highlight><highlight class="normal">,<sp/>EntityEnum::PLANT)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;TILE_EFFECT&quot;</highlight><highlight class="normal">,<sp/>EntityEnum::TILE_EFFECT)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.export_values();</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exposing<sp/>TerrainEnum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::enum_&lt;TerrainEnum&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;TerrainEnum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;EMPTY&quot;</highlight><highlight class="normal">,<sp/>TerrainEnum::EMPTY)</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;GRASS&quot;</highlight><highlight class="normal">,<sp/>TerrainEnum::GRASS)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;WATER&quot;</highlight><highlight class="normal">,<sp/>TerrainEnum::WATER)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.export_values();</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;EntityTypeComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;EntityTypeComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;main_type&quot;</highlight><highlight class="normal">,<sp/>&amp;EntityTypeComponent::mainType)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;sub_type0&quot;</highlight><highlight class="normal">,<sp/>&amp;EntityTypeComponent::subType0)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;sub_type1&quot;</highlight><highlight class="normal">,<sp/>&amp;EntityTypeComponent::subType1)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;print&quot;</highlight><highlight class="normal">,<sp/>&amp;EntityTypeComponent::print);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::enum_&lt;ItemEnum&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ItemEnum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;FOOD&quot;</highlight><highlight class="normal">,<sp/>ItemEnum::FOOD)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;TOOL&quot;</highlight><highlight class="normal">,<sp/>ItemEnum::TOOL)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;WEAPON&quot;</highlight><highlight class="normal">,<sp/>ItemEnum::WEAPON)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;ARMOR&quot;</highlight><highlight class="normal">,<sp/>ItemEnum::ARMOR)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.export_values();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::enum_&lt;ItemFoodEnum&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ItemFoodEnum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;RASPBERRY_FRUIT&quot;</highlight><highlight class="normal">,<sp/>ItemFoodEnum::RASPBERRY_FRUIT)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;RASPBERRY_LEAF&quot;</highlight><highlight class="normal">,<sp/>ItemFoodEnum::RASPBERRY_LEAF)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.export_values();</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::enum_&lt;ItemToolEnum&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ItemToolEnum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;STONE_AXE&quot;</highlight><highlight class="normal">,<sp/>ItemToolEnum::STONE_AXE)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.export_values();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;ItemTypeComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ItemTypeComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;main_type&quot;</highlight><highlight class="normal">,<sp/>&amp;ItemTypeComponent::mainType)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;sub_type0&quot;</highlight><highlight class="normal">,<sp/>&amp;ItemTypeComponent::subType0)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;sub_type1&quot;</highlight><highlight class="normal">,<sp/>&amp;ItemTypeComponent::subType1);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;Inventory&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;Inventory&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;max_items&quot;</highlight><highlight class="normal">,<sp/>&amp;Inventory::maxItems)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_ro(</highlight><highlight class="stringliteral">&quot;item_ids&quot;</highlight><highlight class="normal">,<sp/>&amp;Inventory::itemIDs)</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;add_item&quot;</highlight><highlight class="normal">,<sp/>&amp;Inventory::addItem,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;itemID&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;resize&quot;</highlight><highlight class="normal">,<sp/>&amp;Inventory::resizeInventory,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;newSize&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;is_full&quot;</highlight><highlight class="normal">,<sp/>&amp;Inventory::isFull)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;is_empty&quot;</highlight><highlight class="normal">,<sp/>&amp;Inventory::isEmpty)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;pop_item&quot;</highlight><highlight class="normal">,<sp/>&amp;Inventory::popItem)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;remove_item_by_slot&quot;</highlight><highlight class="normal">,<sp/>&amp;Inventory::removeItemBySlot,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;slotID&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;remove_item&quot;</highlight><highlight class="normal">,<sp/>&amp;Inventory::removeItemById,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;itemID&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;DropRates&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;DropRates&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;itemDropRates&quot;</highlight><highlight class="normal">,<sp/>&amp;DropRates::itemDropRates)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;add_item&quot;</highlight><highlight class="normal">,<sp/>&amp;DropRates::addItem,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;itemID&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;dropRate&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;minDrop&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;maxDrop&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;FoodItem&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;FoodItem&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;energy_density&quot;</highlight><highlight class="normal">,<sp/>&amp;FoodItem::energyDensity)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/>&amp;FoodItem::mass)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;volume&quot;</highlight><highlight class="normal">,<sp/>&amp;FoodItem::volume)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;convertion_efficiency&quot;</highlight><highlight class="normal">,<sp/>&amp;FoodItem::convertionEfficiency)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;energy_health_ratio&quot;</highlight><highlight class="normal">,<sp/>&amp;FoodItem::energyHealthRatio);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;WeaponAttributes&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;WeaponAttributes&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;damage&quot;</highlight><highlight class="normal">,<sp/>&amp;WeaponAttributes::damage)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;defense&quot;</highlight><highlight class="normal">,<sp/>&amp;WeaponAttributes::defense);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;Durability&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;Durability&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;current&quot;</highlight><highlight class="normal">,<sp/>&amp;Durability::current)</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;max&quot;</highlight><highlight class="normal">,<sp/>&amp;Durability::max);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;MeeleAttackComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MeeleAttackComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;weapon&quot;</highlight><highlight class="normal">,<sp/>&amp;MeeleAttackComponent::weapon)</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;hovered_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;MeeleAttackComponent::hoveredEntity)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;selected_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;MeeleAttackComponent::selectedEntity);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;MetabolismComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MetabolismComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;energy_reserve&quot;</highlight><highlight class="normal">,<sp/>&amp;MetabolismComponent::energyReserve)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;max_energy_reserve&quot;</highlight><highlight class="normal">,<sp/>&amp;MetabolismComponent::maxEnergyReserve);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;DigestingFoodItem&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;DigestingFoodItem&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;food_item_id&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestingFoodItem::foodItemID)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;processing_time&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestingFoodItem::processingTime)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;energy_left&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestingFoodItem::energyLeft)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;energy_density&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestingFoodItem::energyDensity)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;mass&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestingFoodItem::mass)</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;volume&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestingFoodItem::volume)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;convertion_efficiency&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestingFoodItem::convertionEfficiency)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;energy_health_ratio&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestingFoodItem::energyHealthRatio);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;DigestionComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;DigestionComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;size_of_stomach&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestionComponent::sizeOfStomach)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_ro(</highlight><highlight class="stringliteral">&quot;digesting_items&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestionComponent::digestingItems)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;add_item&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestionComponent::addItem)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;remove_item&quot;</highlight><highlight class="normal">,<sp/>&amp;DigestionComponent::removeItem);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;ConsoleLogsComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ConsoleLogsComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;max_size&quot;</highlight><highlight class="normal">,<sp/>&amp;ConsoleLogsComponent::max_size)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_ro(</highlight><highlight class="stringliteral">&quot;log_buffer&quot;</highlight><highlight class="normal">,<sp/>&amp;ConsoleLogsComponent::log_buffer)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;add_log&quot;</highlight><highlight class="normal">,<sp/>&amp;ConsoleLogsComponent::add_log);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;FruitGrowth&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;FruitGrowth&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;energy_needed&quot;</highlight><highlight class="normal">,<sp/>&amp;FruitGrowth::energyNeeded)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;current_energy&quot;</highlight><highlight class="normal">,<sp/>&amp;FruitGrowth::currentEnergy);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;MatterContainer&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MatterContainer&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;terrain_matter&quot;</highlight><highlight class="normal">,<sp/>&amp;MatterContainer::TerrainMatter)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;water_vapor&quot;</highlight><highlight class="normal">,<sp/>&amp;MatterContainer::WaterVapor)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;water_matter&quot;</highlight><highlight class="normal">,<sp/>&amp;MatterContainer::WaterMatter)</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;bio_mass_matter&quot;</highlight><highlight class="normal">,<sp/>&amp;MatterContainer::BioMassMatter);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::enum_&lt;TileEffectTypeEnum&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;TileEffectTypeEnum&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;EMPTY&quot;</highlight><highlight class="normal">,<sp/>TileEffectTypeEnum::EMPTY)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;BLOOD_DAMAGE&quot;</highlight><highlight class="normal">,<sp/>TileEffectTypeEnum::BLOOD_DAMAGE)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;GREEN_DAMAGE&quot;</highlight><highlight class="normal">,<sp/>TileEffectTypeEnum::GREEN_DAMAGE)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.export_values();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;TileEffectComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;TileEffectComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;tile_effect_type&quot;</highlight><highlight class="normal">,<sp/>&amp;TileEffectComponent::tileEffectType)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;damage_value&quot;</highlight><highlight class="normal">,<sp/>&amp;TileEffectComponent::damageValue)</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;effect_total_time&quot;</highlight><highlight class="normal">,<sp/>&amp;TileEffectComponent::effectTotalTime)</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;effect_remaining_time&quot;</highlight><highlight class="normal">,<sp/>&amp;TileEffectComponent::effectRemainingTime);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;TileEffectsList&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;TileEffectsList&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;tile_effects_ids&quot;</highlight><highlight class="normal">,<sp/>&amp;TileEffectsList::tileEffectsIDs)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;add_effect&quot;</highlight><highlight class="normal">,<sp/>&amp;TileEffectsList::addEffect,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;TileEffectID&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;ParentsComponent&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ParentsComponent&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;parents&quot;</highlight><highlight class="normal">,<sp/>&amp;ParentsComponent::parents);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::enum_&lt;ComponentFlag&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;ComponentFlag&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;ENTITY_TYPE&quot;</highlight><highlight class="normal">,<sp/>ComponentFlag::ENTITY_TYPE)</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;MASS&quot;</highlight><highlight class="normal">,<sp/>ComponentFlag::MASS)</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;POSITION&quot;</highlight><highlight class="normal">,<sp/>ComponentFlag::POSITION)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;VELOCITY&quot;</highlight><highlight class="normal">,<sp/>ComponentFlag::VELOCITY)</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;MOVING_COMPONENT&quot;</highlight><highlight class="normal">,<sp/>ComponentFlag::MOVING_COMPONENT)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;HEALTH&quot;</highlight><highlight class="normal">,<sp/>ComponentFlag::HEALTH)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;PERCEPTION&quot;</highlight><highlight class="normal">,<sp/>ComponentFlag::PERCEPTION)</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.value(</highlight><highlight class="stringliteral">&quot;COMPONENT_COUNT&quot;</highlight><highlight class="normal">,<sp/>ComponentFlag::COMPONENT_COUNT)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.export_values();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>the<sp/>EntityInterface<sp/>class<sp/>to<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;EntityInterface&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;EntityInterface&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Entity<sp/>ID<sp/>accessors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity_id&quot;</highlight><highlight class="normal">,<sp/>&amp;EntityInterface::getEntityId)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_entity_id&quot;</highlight><highlight class="normal">,<sp/>&amp;EntityInterface::setEntityId)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Component<sp/>accessors<sp/>using<sp/>lambdas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity_type&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structEntityTypeComponent" kindref="compound">EntityTypeComponent</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structEntityTypeComponent" kindref="compound">EntityTypeComponent</ref>&gt;();</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_entity_type&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structEntityTypeComponent" kindref="compound">EntityTypeComponent</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setComponent&lt;<ref refid="structEntityTypeComponent" kindref="compound">EntityTypeComponent</ref>&gt;(value);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_mass&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPhysicsStats" kindref="compound">PhysicsStats</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structPhysicsStats" kindref="compound">PhysicsStats</ref>&gt;();</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_mass&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPhysicsStats" kindref="compound">PhysicsStats</ref>&amp;<sp/>value)<sp/>{<sp/>self.setComponent&lt;<ref refid="structPhysicsStats" kindref="compound">PhysicsStats</ref>&gt;(value);<sp/>})</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_position&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPosition" kindref="compound">Position</ref>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structPosition" kindref="compound">Position</ref>&gt;();<sp/>})</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_position&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPosition" kindref="compound">Position</ref>&amp;<sp/>value)<sp/>{<sp/>self.setComponent&lt;<ref refid="structPosition" kindref="compound">Position</ref>&gt;(value);<sp/>})</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_velocity&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structVelocity" kindref="compound">Velocity</ref>&gt;();<sp/>})</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_velocity&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structVelocity" kindref="compound">Velocity</ref>&amp;<sp/>value)<sp/>{<sp/>self.setComponent&lt;<ref refid="structVelocity" kindref="compound">Velocity</ref>&gt;(value);<sp/>})</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_moving_component&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMovingComponent" kindref="compound">MovingComponent</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structMovingComponent" kindref="compound">MovingComponent</ref>&gt;();</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_moving_component&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMovingComponent" kindref="compound">MovingComponent</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setComponent&lt;<ref refid="structMovingComponent" kindref="compound">MovingComponent</ref>&gt;(value);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_health&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHealthComponent" kindref="compound">HealthComponent</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structHealthComponent" kindref="compound">HealthComponent</ref>&gt;();</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_health&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHealthComponent" kindref="compound">HealthComponent</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setComponent&lt;<ref refid="structHealthComponent" kindref="compound">HealthComponent</ref>&gt;(value);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_perception&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPerceptionComponent" kindref="compound">PerceptionComponent</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structPerceptionComponent" kindref="compound">PerceptionComponent</ref>&gt;();</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_perception&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structPerceptionComponent" kindref="compound">PerceptionComponent</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setComponent&lt;<ref refid="structPerceptionComponent" kindref="compound">PerceptionComponent</ref>&gt;(value);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_inventory&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structInventory" kindref="compound">Inventory</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structInventory" kindref="compound">Inventory</ref>&gt;();</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_inventory&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structInventory" kindref="compound">Inventory</ref>&amp;<sp/>value)<sp/>{<sp/>self.setComponent&lt;<ref refid="structInventory" kindref="compound">Inventory</ref>&gt;(value);<sp/>})</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_console_logs&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structConsoleLogsComponent" kindref="compound">ConsoleLogsComponent</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structConsoleLogsComponent" kindref="compound">ConsoleLogsComponent</ref>&gt;();</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_console_logs&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structConsoleLogsComponent" kindref="compound">ConsoleLogsComponent</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setComponent&lt;<ref refid="structConsoleLogsComponent" kindref="compound">ConsoleLogsComponent</ref>&gt;(value);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_matter_container&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMatterContainer" kindref="compound">MatterContainer</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structMatterContainer" kindref="compound">MatterContainer</ref>&gt;();</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_matter_container&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMatterContainer" kindref="compound">MatterContainer</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setComponent&lt;<ref refid="structMatterContainer" kindref="compound">MatterContainer</ref>&gt;(value);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_item_enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ItemEnum&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;ItemEnum&gt;();<sp/>},</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_item_enum&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ItemEnum&amp;<sp/>value)<sp/>{<sp/>self.setComponent&lt;ItemEnum&gt;(value);<sp/>})</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_item_type_comp&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structItemTypeComponent" kindref="compound">ItemTypeComponent</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structItemTypeComponent" kindref="compound">ItemTypeComponent</ref>&gt;();</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_item_type_comp&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structItemTypeComponent" kindref="compound">ItemTypeComponent</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setComponent&lt;<ref refid="structItemTypeComponent" kindref="compound">ItemTypeComponent</ref>&gt;(value);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_tile_effect_comp&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structTileEffectComponent" kindref="compound">TileEffectComponent</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structTileEffectComponent" kindref="compound">TileEffectComponent</ref>&gt;();</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_tile_effect_comp&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structTileEffectComponent" kindref="compound">TileEffectComponent</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setComponent&lt;<ref refid="structTileEffectComponent" kindref="compound">TileEffectComponent</ref>&gt;(value);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_tile_effects_list&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structTileEffectsList" kindref="compound">TileEffectsList</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structTileEffectsList" kindref="compound">TileEffectsList</ref>&gt;();</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_tile_effects_list&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structTileEffectsList" kindref="compound">TileEffectsList</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setComponent&lt;<ref refid="structTileEffectsList" kindref="compound">TileEffectsList</ref>&gt;(value);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_food_item&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structFoodItem" kindref="compound">FoodItem</ref>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structFoodItem" kindref="compound">FoodItem</ref>&gt;();<sp/>},</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_food_item&quot;</highlight><highlight class="normal">,<sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structFoodItem" kindref="compound">FoodItem</ref>&amp;<sp/>value)<sp/>{<sp/>self.setComponent&lt;<ref refid="structFoodItem" kindref="compound">FoodItem</ref>&gt;(value);<sp/>})</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_metabolism&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMetabolismComponent" kindref="compound">MetabolismComponent</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structMetabolismComponent" kindref="compound">MetabolismComponent</ref>&gt;();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_metabolism&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structMetabolismComponent" kindref="compound">MetabolismComponent</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setComponent&lt;<ref refid="structMetabolismComponent" kindref="compound">MetabolismComponent</ref>&gt;(value);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;get_parents&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structParentsComponent" kindref="compound">ParentsComponent</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.getComponent&lt;<ref refid="structParentsComponent" kindref="compound">ParentsComponent</ref>&gt;();</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::rv_policy::reference_internal)</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_parents&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structParentsComponent" kindref="compound">ParentsComponent</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.setComponent&lt;<ref refid="structParentsComponent" kindref="compound">ParentsComponent</ref>&gt;(value);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has_component<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;has_component&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classEntityInterface" kindref="compound">EntityInterface</ref>&amp;<sp/>self,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.hasComponent(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ComponentFlag</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(flag));</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;flag&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Serialization<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;serialize&quot;</highlight><highlight class="normal">,<sp/>&amp;EntityInterface::py_serialize)</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_static(</highlight><highlight class="stringliteral">&quot;deserialize&quot;</highlight><highlight class="normal">,<sp/>&amp;EntityInterface::py_deserialize);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::bind_map&lt;std::unordered_map&lt;int,<sp/>EntityInterface&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;MapEntityInterface&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;VoxelGridView&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;VoxelGridView&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridView::width)</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridView::height)</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;depth&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridView::depth)</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;initVoxelGridView&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridView::initVoxelGridView)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_terrain&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridView::setTerrainVoxel)</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_terrain&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridView::getTerrainVoxel)</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridView::setEntityVoxel)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridView::getEntityVoxel)</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;serialize_flatbuffer&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridView::serializeFlatBuffers)</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;deserialize_flatbuffer&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridView::deserializeFlatBuffers);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;VoxelGridViewFlatB&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;VoxelGridViewFlatB&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exposing<sp/>the<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;nb::bytes&gt;())</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exposing<sp/>member<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getWidth&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridViewFlatB::getWidth)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getHeight&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridViewFlatB::getHeight)</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getDepth&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridViewFlatB::getDepth)</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getXOffset&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridViewFlatB::getXOffset)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getYOffset&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridViewFlatB::getYOffset)</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;getZOffset&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridViewFlatB::getZOffset)</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_terrain&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridViewFlatB::getTerrainVoxel)</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridViewFlatB::getEntityVoxel);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>VoxelGridCoordinates<sp/>struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;VoxelGridCoordinates&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;VoxelGridCoordinates&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;int,<sp/>int,<sp/>int&gt;(),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Initialize<sp/>VoxelGridCoordinates<sp/>with<sp/>x,<sp/>y,<sp/>z&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_ro(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridCoordinates::x)</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_ro(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridCoordinates::y)</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_ro(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGridCoordinates::z)</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;__repr__&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structVoxelGridCoordinates" kindref="compound">VoxelGridCoordinates</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&lt;VoxelGridCoordinates<sp/>x=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(c.x)<sp/>+</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>y=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(c.y)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>z=&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(c.z)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::self<sp/>==<sp/>nb::self);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::bind_vector&lt;std::vector&lt;VoxelGridCoordinates&gt;&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;VecVoxelGridCoordinates&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>VoxelGrid<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;VoxelGrid&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;VoxelGrid&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;initialize_grids&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::initializeGrids)</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_voxel&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::setVoxel,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>voxel<sp/>data<sp/>at<sp/>(x,<sp/>y,<sp/>z)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_voxel&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::getVoxel,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Get<sp/>voxel<sp/>data<sp/>at<sp/>(x,<sp/>y,<sp/>z)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_terrain&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::setTerrain,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;terrainID&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>terrainID<sp/>at<sp/>(x,<sp/>y,<sp/>z)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_terrain&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::getTerrain,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Get<sp/>terrainID<sp/>at<sp/>(x,<sp/>y,<sp/>z)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::setEntity,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;entityID&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>entityID<sp/>at<sp/>(x,<sp/>y,<sp/>z)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::getEntity,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Get<sp/>entityID<sp/>at<sp/>(x,<sp/>y,<sp/>z)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_event&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::setEvent,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;eventID&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>eventID<sp/>at<sp/>(x,<sp/>y,<sp/>z)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_event&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::getEvent,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Get<sp/>eventID<sp/>at<sp/>(x,<sp/>y,<sp/>z)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_lighting_level&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::setLightingLevel,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;lightingLevel&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>lightingLevel<sp/>at<sp/>(x,<sp/>y,<sp/>z)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_lighting_level&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::getLightingLevel,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Get<sp/>lightingLevel<sp/>at<sp/>(x,<sp/>y,<sp/>z)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>the<sp/>new<sp/>utility<sp/>search<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_all_terrain_in_region&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::getAllTerrainInRegion,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x_min&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y_min&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_min&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x_max&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y_max&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_max&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Retrieve<sp/>all<sp/>terrain<sp/>voxel<sp/>coordinates<sp/>within<sp/>a<sp/>specified<sp/>region.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_all_entity_in_region&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::getAllEntityInRegion,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x_min&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y_min&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_min&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x_max&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y_max&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_max&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Retrieve<sp/>all<sp/>entity<sp/>voxel<sp/>coordinates<sp/>within<sp/>a<sp/>specified<sp/>region.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_all_event_in_region&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::getAllEventInRegion,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x_min&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y_min&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_min&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x_max&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y_max&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_max&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Retrieve<sp/>all<sp/>event<sp/>voxel<sp/>coordinates<sp/>within<sp/>a<sp/>specified<sp/>region.&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_all_lighting_in_region&quot;</highlight><highlight class="normal">,<sp/>&amp;VoxelGrid::getAllLightingInRegion,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x_min&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y_min&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_min&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;x_max&quot;</highlight><highlight class="normal">),<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;y_max&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;z_max&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Retrieve<sp/>all<sp/>lighting<sp/>voxel<sp/>coordinates<sp/>within<sp/>a<sp/>specified<sp/>region.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binding<sp/>the<sp/>GameClock<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;GameClock&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;GameClock&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;uint64_t&gt;())</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;tick&quot;</highlight><highlight class="normal">,<sp/>&amp;GameClock::tick,<sp/></highlight><highlight class="stringliteral">&quot;Advances<sp/>the<sp/>clock<sp/>by<sp/>one<sp/>tick<sp/>(one<sp/>in-game<sp/>second)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_ticks&quot;</highlight><highlight class="normal">,<sp/>&amp;GameClock::getTicks,<sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>total<sp/>number<sp/>of<sp/>ticks<sp/>elapsed&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_ticks&quot;</highlight><highlight class="normal">,<sp/>&amp;GameClock::setTicks,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;ticks&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Sets<sp/>the<sp/>total<sp/>number<sp/>of<sp/>ticks&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_seconds&quot;</highlight><highlight class="normal">,<sp/>&amp;GameClock::getSeconds,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>total<sp/>number<sp/>of<sp/>ticks<sp/>(seconds)<sp/>elapsed&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_second&quot;</highlight><highlight class="normal">,<sp/>&amp;GameClock::getSecond,<sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>current<sp/>second<sp/>within<sp/>the<sp/>minute&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_minute&quot;</highlight><highlight class="normal">,<sp/>&amp;GameClock::getMinute,<sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>current<sp/>minute<sp/>within<sp/>the<sp/>hour&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_hour&quot;</highlight><highlight class="normal">,<sp/>&amp;GameClock::getHour,<sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>current<sp/>hour<sp/>within<sp/>the<sp/>day&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_day&quot;</highlight><highlight class="normal">,<sp/>&amp;GameClock::getDay,<sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>current<sp/>day<sp/>within<sp/>the<sp/>month<sp/>(1-28)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_month&quot;</highlight><highlight class="normal">,<sp/>&amp;GameClock::getMonth,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>current<sp/>month<sp/>(season)<sp/>within<sp/>the<sp/>year<sp/>(1-4)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_year&quot;</highlight><highlight class="normal">,<sp/>&amp;GameClock::getYear,<sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>current<sp/>year&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_season&quot;</highlight><highlight class="normal">,<sp/>&amp;GameClock::getSeason,<sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>current<sp/>season<sp/>as<sp/>a<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binding<sp/>the<sp/>SunIntensity<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;SunIntensity&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;SunIntensity&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_static(</highlight><highlight class="stringliteral">&quot;getIntensity&quot;</highlight><highlight class="normal">,<sp/>&amp;SunIntensity::getIntensity,<sp/>nb::arg(</highlight><highlight class="stringliteral">&quot;clock&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Returns<sp/>the<sp/>sun<sp/>intensity<sp/>as<sp/>a<sp/>value<sp/>between<sp/>0.0<sp/>and<sp/>1.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expose<sp/>PyRegistry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;PyRegistry&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;PyRegistry&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>constructor<sp/>binding<sp/>since<sp/>PyRegistry<sp/>cannot<sp/>be<sp/>constructed<sp/>from<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;create_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;PyRegistry::create_entity)</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;destroy_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;PyRegistry::destroy_entity)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;view&quot;</highlight><highlight class="normal">,<sp/>&amp;PyRegistry::view)</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;has_all_components&quot;</highlight><highlight class="normal">,<sp/>&amp;PyRegistry::has_all_components)</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_component&quot;</highlight><highlight class="normal">,<sp/>&amp;PyRegistry::get_component,<sp/>nb::rv_policy::copy)</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;set_component&quot;</highlight><highlight class="normal">,<sp/>&amp;PyRegistry::set_component)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;remove_component&quot;</highlight><highlight class="normal">,<sp/>&amp;PyRegistry::remove_component)</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;is_valid&quot;</highlight><highlight class="normal">,<sp/>&amp;PyRegistry::is_valid);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;get_and_draw_selected_entity&quot;</highlight><highlight class="normal">,<sp/>&amp;getAndDrawSelectedEntity);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;draw_tile_effects&quot;</highlight><highlight class="normal">,<sp/>&amp;drawTileEffects);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;should_draw_terrain&quot;</highlight><highlight class="normal">,<sp/>&amp;shouldDrawTerrain);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;is_terrain_an_empty_water&quot;</highlight><highlight class="normal">,<sp/>&amp;isTerrainAnEmptyWater);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;is_occluding_entity_perspective&quot;</highlight><highlight class="normal">,<sp/>&amp;isOccludingEntityPerspective);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;GenomeParams&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;GenomeParams&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;num_inputs&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::num_inputs)</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;num_outputs&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::num_outputs)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;num_hidden&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::num_hidden)</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;feed_forward&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::feed_forward)</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;compatibility_disjoint_coefficient&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;GenomeParams::compatibility_disjoint_coefficient)</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;compatibility_weight_coefficient&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::compatibility_weight_coefficient)</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;conn_add_prob&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::conn_add_prob)</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;conn_delete_prob&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::conn_delete_prob)</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;node_add_prob&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::node_add_prob)</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;node_delete_prob&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::node_delete_prob)</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;single_structural_mutation&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::single_structural_mutation)</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;structural_mutation_surer&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::structural_mutation_surer)</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;initial_connection&quot;</highlight><highlight class="normal">,<sp/>&amp;GenomeParams::initial_connection);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>nb::class_&lt;DefaultGenomeConfig&gt;(m,<sp/></highlight><highlight class="stringliteral">&quot;DefaultGenomeConfig&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;const<sp/>GenomeParams&amp;&gt;())</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;num_inputs&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::num_inputs)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;num_outputs&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::num_outputs)</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;num_hidden&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::num_hidden)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;feed_forward&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::feed_forward)</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;compatibility_disjoint_coefficient&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;DefaultGenomeConfig::compatibility_disjoint_coefficient)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;compatibility_weight_coefficient&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;DefaultGenomeConfig::compatibility_weight_coefficient)</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;conn_add_prob&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::conn_add_prob)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;conn_delete_prob&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::conn_delete_prob)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;node_add_prob&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::node_add_prob)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;node_delete_prob&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::node_delete_prob)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;single_structural_mutation&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::single_structural_mutation)</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;structural_mutation_surer&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::structural_mutation_surer)</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;initial_connection&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::initial_connection)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;connection_fraction&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::connection_fraction)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;input_keys&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::input_keys)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def_rw(</highlight><highlight class="stringliteral">&quot;output_keys&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::output_keys)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.def(</highlight><highlight class="stringliteral">&quot;get_new_node_key&quot;</highlight><highlight class="normal">,<sp/>&amp;DefaultGenomeConfig::get_new_node_key);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nb::class_&lt;DefaultNodeGene&gt;(m,<sp/>&quot;DefaultNodeGene&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def_rw(&quot;key&quot;,<sp/>&amp;DefaultNodeGene::key)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(&quot;copy&quot;,<sp/>&amp;DefaultNodeGene::copy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(&quot;distance&quot;,<sp/>&amp;DefaultNodeGene::distance);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>.def(&quot;mutate&quot;,<sp/>&amp;DefaultNodeGene::mutate);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nb::class_&lt;DefaultConnectionGene&gt;(m,<sp/>&quot;DefaultConnectionGene&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def_rw(&quot;weight&quot;,<sp/>&amp;DefaultConnectionGene::weight)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def_rw(&quot;enabled&quot;,<sp/>&amp;DefaultConnectionGene::enabled)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(&quot;copy&quot;,<sp/>&amp;DefaultConnectionGene::copy)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(&quot;distance&quot;,<sp/>&amp;DefaultConnectionGene::distance);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>.def(&quot;mutate&quot;,<sp/>&amp;DefaultConnectionGene::mutate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>.def(&quot;crossover&quot;,<sp/>&amp;DefaultConnectionGene::crossover);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nb::class_&lt;DefaultGenome&gt;(m,<sp/>&quot;DefaultGenome&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(nb::init&lt;&gt;())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def_rw(&quot;key&quot;,<sp/>&amp;DefaultGenome::key)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def_rw(&quot;fitness&quot;,<sp/>&amp;DefaultGenome::fitness)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def_rw(&quot;nodes&quot;,<sp/>&amp;DefaultGenome::nodes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def_rw(&quot;connections&quot;,<sp/>&amp;DefaultGenome::connections)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(&quot;configure_new&quot;,<sp/>&amp;DefaultGenome::configure_new)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>.def(&quot;mutate_add_node&quot;,<sp/>&amp;DefaultGenome::mutate_add_node);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>m.def(</highlight><highlight class="stringliteral">&quot;get_pruned_copy&quot;</highlight><highlight class="normal">,<sp/>&amp;get_pruned_copy,<sp/></highlight><highlight class="stringliteral">&quot;Get<sp/>a<sp/>pruned<sp/>copy<sp/>of<sp/>the<sp/>genome&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/aetherion.cpp"/>
  </compounddef>
</doxygen>
